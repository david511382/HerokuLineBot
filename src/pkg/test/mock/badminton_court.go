// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/logic/badminton/court.go

// Package mock is a generated GoMock package.
package mock

import (
	badminton "heroku-line-bot/src/logic/badminton"
	util "heroku-line-bot/src/pkg/util"
	error "heroku-line-bot/src/pkg/util/error"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIBadmintonCourtLogic is a mock of IBadmintonCourtLogic interface.
type MockIBadmintonCourtLogic struct {
	ctrl     *gomock.Controller
	recorder *MockIBadmintonCourtLogicMockRecorder
}

// MockIBadmintonCourtLogicMockRecorder is the mock recorder for MockIBadmintonCourtLogic.
type MockIBadmintonCourtLogicMockRecorder struct {
	mock *MockIBadmintonCourtLogic
}

// NewMockIBadmintonCourtLogic creates a new mock instance.
func NewMockIBadmintonCourtLogic(ctrl *gomock.Controller) *MockIBadmintonCourtLogic {
	mock := &MockIBadmintonCourtLogic{ctrl: ctrl}
	mock.recorder = &MockIBadmintonCourtLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBadmintonCourtLogic) EXPECT() *MockIBadmintonCourtLogicMockRecorder {
	return m.recorder
}

// GetCourts mocks base method.
func (m *MockIBadmintonCourtLogic) GetCourts(fromDate, toDate util.DateTime, teamID, placeID *uint) (map[uint]map[uint][]*badminton.DateCourt, error.IError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourts", fromDate, toDate, teamID, placeID)
	ret0, _ := ret[0].(map[uint]map[uint][]*badminton.DateCourt)
	ret1, _ := ret[1].(error.IError)
	return ret0, ret1
}

// GetCourts indicates an expected call of GetCourts.
func (mr *MockIBadmintonCourtLogicMockRecorder) GetCourts(fromDate, toDate, teamID, placeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourts", reflect.TypeOf((*MockIBadmintonCourtLogic)(nil).GetCourts), fromDate, toDate, teamID, placeID)
}
