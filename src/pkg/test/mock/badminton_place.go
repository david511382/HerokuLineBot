// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/logic/badminton/place.go

// Package mock is a generated GoMock package.
package mock

import (
	redis "heroku-line-bot/src/model/redis"
	error "heroku-line-bot/src/pkg/util/error"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIBadmintonPlaceLogic is a mock of IBadmintonPlaceLogic interface.
type MockIBadmintonPlaceLogic struct {
	ctrl     *gomock.Controller
	recorder *MockIBadmintonPlaceLogicMockRecorder
}

// MockIBadmintonPlaceLogicMockRecorder is the mock recorder for MockIBadmintonPlaceLogic.
type MockIBadmintonPlaceLogicMockRecorder struct {
	mock *MockIBadmintonPlaceLogic
}

// NewMockIBadmintonPlaceLogic creates a new mock instance.
func NewMockIBadmintonPlaceLogic(ctrl *gomock.Controller) *MockIBadmintonPlaceLogic {
	mock := &MockIBadmintonPlaceLogic{ctrl: ctrl}
	mock.recorder = &MockIBadmintonPlaceLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBadmintonPlaceLogic) EXPECT() *MockIBadmintonPlaceLogicMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockIBadmintonPlaceLogic) Load(ids ...uint) (map[uint]*redis.ClubBadmintonPlace, error.IError) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Load", varargs...)
	ret0, _ := ret[0].(map[uint]*redis.ClubBadmintonPlace)
	ret1, _ := ret[1].(error.IError)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockIBadmintonPlaceLogicMockRecorder) Load(ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockIBadmintonPlaceLogic)(nil).Load), ids...)
}
